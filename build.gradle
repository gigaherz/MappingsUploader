plugins {
    id "de.undercouch.download" version "4.1.1"
}
apply plugin: 'maven-publish'
apply plugin: dev.gigaherz.customartifacts.CustomArtifactsPlugin

def exportSnapshotType = project.hasProperty("exportSnapshotType") ? project.property("exportSnapshotType") : 'debug'
def timestampFormat

if (exportSnapshotType == 'debug') {
	timestampFormat = 'yyyyMMdd-HHmmss'
}
else if (exportSnapshotType == 'release') {
	timestampFormat = 'yyyyMMdd'
}
else {
	throw InvalidUserDataException('exportSnapshotType must be either "debug" or "release"')
}

group 'de.oceanlabs.mcp'
version "${new Date().format(timestampFormat)}-${project.exportMinecraftVersion}"

System.out.println("mappings channel: 'snapshot', version: '${project.version}'")

def archiveFileName = "mcp_snapshot-${version}.zip"
def archiveFile = file("$buildDir/${archiveFileName}")

artifacts.add('mappingsExports', archiveFile) {
    type 'zip'
    extension 'zip'
}

def baseMappingsZip = file("$buildDir/tmp/basemappings-${project.baseMappings}.zip")
def baseMappingsTarget = "reference/base_mappings"

task downloadBaseMappings(type: Download) {
	group ''
	outputs.file baseMappingsZip
	
	src "https://www.dogforce-games.com/maven/de/oceanlabs/mcp/mcp_snapshot/${project.baseMappings}/mcp_snapshot-${project.baseMappings}.zip"
	dest baseMappingsZip
	onlyIfModified true
}

task extractBaseMappings(type: Copy) {
	group 'setup'
	outputs.file "$baseMappingsTarget/fields.csv"
	outputs.file "$baseMappingsTarget/methods.csv"
	outputs.file "$baseMappingsTarget/params.csv"
	
	dependsOn downloadBaseMappings
	from zipTree(baseMappingsZip)
	into baseMappingsTarget
}

task downloadSpreadsheet(type: Download) {
    src "https://docs.google.com/spreadsheet/ccc?key=${project.spreadsheetKey}&output=csv"
    dest file("$buildDir/tmp/spreadsheet.csv")
}

task convertToCSV(type: dev.gigaherz.mappingdownloader.ConvertToCsvTask) {
    dependsOn downloadSpreadsheet
    inputFile downloadSpreadsheet.dest
    destinationDir file("$buildDir/tmp/downloaded_mappings/")
}

task mergeMappings(type: dev.gigaherz.mappingdownloader.MergeMappingsTask) {
    dependsOn convertToCSV
    dirs file('reference/base_mappings'), convertToCSV.destinationDir
    if (file("reference/manual_overrides").exists())
    {
        dirs file("reference/manual_overrides")
    }
    destinationDir file("$buildDir/tmp/merged_mappings/")
}

task checkMappings(type: dev.gigaherz.mappingdownloader.CheckMappingsTask) {
    dependsOn mergeMappings
    checkDir mergeMappings.destinationDir
    joinedTsrg file("reference/mcpconfig/joined.tsrg")
    inheritanceJson file("reference/mcpconfig/inheritance.json")
}

task makeSnapshot(type: Zip) {
    dependsOn mergeMappings, checkMappings
    from mergeMappings.destinationDir
    include '*.csv'
    archiveName archiveFileName
    destinationDir buildDir
}

task build {
    dependsOn makeSnapshot
}

tasks.publish.dependsOn makeSnapshot
tasks.publishToMavenLocal.dependsOn makeSnapshot

publishing {
    publications {
        mappings(MavenPublication) {
            artifactId "mcp_snapshot"
            from components.mappingsComponent
        }
    }

    repositories {
        maven {
            if (project.hasProperty('forgeMavenPassword')) {
                credentials {
                    username project.properties.forgeMavenUser
                    password project.properties.forgeMavenPassword
                }
                url 'https://files.minecraftforge.net/maven/manage/upload'
            } else {
                url "$projectDir/maven"
            }
        }
    }
}
